{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_ADLS_tsv",
						"type": "DatasetReference"
					},
					"name": "source"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Snowflake",
						"type": "DatasetReference"
					},
					"name": "sink"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn"
				},
				{
					"name": "flatten"
				}
			],
			"scriptLines": [
				"parameters{",
				"     FileName as string ('Chicago_File_Default')",
				"}",
				"source(output(",
				"          {Inspection ID} as integer,",
				"          {DBA Name} as string,",
				"          {AKA Name} as string,",
				"          {License #} as double,",
				"          {Facility Type} as string,",
				"          Risk as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          Zip as double,",
				"          {Inspection Date} as date,",
				"          {Inspection Type} as string,",
				"          Results as string,",
				"          Violations as string,",
				"          Latitude as string,",
				"          Longitude as string,",
				"          Location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source",
				"source derive({DBA Name} = iif(isNull({DBA Name}) || trim({DBA Name}) == '', 'Unknown', trim({DBA Name})),",
				"          {AKA Name} = iif(isNull({AKA Name}) || trim({AKA Name}) == '', 'Unknown', trim({AKA Name})),",
				"          {License #} = iif(isNull({License #}), 0, toInteger({License #}))\r",
				"\r",
				" ,",
				"          Risk = iif(\r",
				"  isNull(Risk) || trim(Risk) == '' || lower(trim(Risk)) == 'all',\r",
				"  'Unknown',\r",
				"  iif(\r",
				"    startsWith(trim(Risk), 'Risk 1'),\r",
				"    'High',\r",
				"    iif(\r",
				"      startsWith(trim(Risk), 'Risk 2'),\r",
				"      'Medium',\r",
				"      iif(\r",
				"        startsWith(trim(Risk), 'Risk 3'),\r",
				"        'Low',\r",
				"        'Unknown'\r",
				"      )\r",
				"    )\r",
				"  )\r",
				"),",
				"          {Facility Type} = iif(isNull({Facility Type}) || trim({Facility Type}) == '', 'Unknown', trim({Facility Type}))\r",
				"\r",
				" ,",
				"          Address = iif(isNull(Address) || trim(Address) == '', 'Unknown', trim(Address))\r",
				"\r",
				" ,",
				"          City = iif(isNull(City) || trim(City) == '', 'Unknown', trim(City))\r",
				"\r",
				" ,",
				"          State = iif(isNull(State) || trim(State) == '', 'NA', trim(State))\r",
				"\r",
				" ,",
				"          Zip = iif(isNull(Zip) || Zip == 0, -1, toInteger(Zip))\r",
				"\r",
				" ,",
				"          {Inspection Type} = iif(isNull({Inspection Type}) || trim({Inspection Type}) == '', 'Unknown', trim({Inspection Type}))\r",
				"\r",
				" ,",
				"          {Inspection Date} = iif(isNull({Inspection Date}) || trim(toString({Inspection Date})) == '', toDate('31-12-9999', 'dd-MM-yyyy'), {Inspection Date}),",
				"          Results = iif(isNull(Results) || trim(Results) == '', 'Unknown', trim(Results))\r",
				"\r",
				" ,",
				"          Violations = split(",
				"  trim(",
				"    replace(",
				"      replace(",
				"        replace(",
				"          replace(",
				"            replace(",
				"              replace(",
				"                replace(",
				"                  trim(Violations),",
				"                  '\"\"\"', '\"'),",
				"                '\\t', ''),",
				"              '\\r', ''),",
				"            '\\n', ' '),",
				"          '||', '|'),",
				"        ' |', '|'),",
				"      '| ', '|')",
				"  ),",
				"  '|'",
				"),",
				"          Latitude = iif(\r",
				"  isNull(Latitude) || trim(toString(Latitude)) == '', \r",
				"  toDecimal(0.000000, 9, 6), \r",
				"  toDecimal(Latitude, 9, 6)\r",
				"),",
				"          Longitude = iif(  isNull(Longitude) || trim(toString(Longitude)) == '',   toDecimal(0.000000, 9, 6),   toDecimal(Longitude, 9, 6)),",
				"          Location = iif(isNull(Location) || trim(Location) == '', '(0,0)', trim(Location)),",
				"          FileName = $FileName,",
				"          LoadDate = currentUTC()) ~> derivedColumn",
				"derivedColumn foldDown(unroll(Violations),",
				"     mapColumn(",
				"          {Inspection ID},",
				"          {DBA Name},",
				"          {AKA Name},",
				"          {License #},",
				"          {Facility Type},",
				"          Risk,",
				"          Address,",
				"          City,",
				"          State,",
				"          Zip,",
				"          {Inspection Date} = {Inspection Type},",
				"          {Inspection Type},",
				"          Results,",
				"          Violations,",
				"          Latitude,",
				"          Longitude,",
				"          Location",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten",
				"flatten sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     stageInsert: true,",
				"     mapColumn(",
				"          INSPECTION_ID = {Inspection ID},",
				"          DBA_NAME = {DBA Name},",
				"          AKA_NAME = {AKA Name},",
				"          LICENSE_NO = {License #},",
				"          FACILITY_TYPE = {Facility Type},",
				"          RISK = Risk,",
				"          ADDRESS = Address,",
				"          CITY = City,",
				"          STATE = State,",
				"          ZIP = Zip,",
				"          INSPECTION_DATE = {Inspection Date},",
				"          INSPECTION_TYPE = {Inspection Type},",
				"          RESULTS = Results,",
				"          VIOLATIONS = Violations,",
				"          LATITUDE = Latitude,",
				"          LONGITUDE = Longitude,",
				"          LOCATION = Location",
				"     )) ~> sink"
			]
		}
	}
}