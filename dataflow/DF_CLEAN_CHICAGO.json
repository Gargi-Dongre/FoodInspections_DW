{
	"name": "DF_CLEAN_CHICAGO",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_ADLS_tsv",
						"type": "DatasetReference"
					},
					"name": "sourceBronze"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_ADLS_parquet",
						"type": "DatasetReference"
					},
					"name": "sinkSilver"
				}
			],
			"transformations": [
				{
					"name": "CleanColumns"
				},
				{
					"name": "CleanViolations"
				},
				{
					"name": "flattenViolations"
				},
				{
					"name": "SplitViolationsCode"
				},
				{
					"name": "CleanViolation"
				},
				{
					"name": "aggregate"
				},
				{
					"name": "derivedColumnMeta"
				}
			],
			"scriptLines": [
				"parameters{",
				"     FName as string ('Chicago_File_Default'),",
				"     Silver_FName as string ('Default.parquet')",
				"}",
				"source(output(",
				"          {Inspection ID} as integer,",
				"          {DBA Name} as string,",
				"          {AKA Name} as string,",
				"          {License #} as double,",
				"          {Facility Type} as string,",
				"          Risk as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          Zip as double,",
				"          {Inspection Date} as date,",
				"          {Inspection Type} as string,",
				"          Results as string,",
				"          Violations as string,",
				"          Latitude as double,",
				"          Longitude as double,",
				"          Location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceBronze",
				"sourceBronze derive({DBA Name} = iif(isNull({DBA Name}) || trim({DBA Name}) == '', 'Unknown', trim({DBA Name})),",
				"          {AKA Name} = iif(isNull({AKA Name}) || trim({AKA Name}) == '', 'Unknown', trim({AKA Name})),",
				"          {License #} = iif(isNull({License #}), 0, toInteger({License #})),",
				"          Risk = iif(\r",
				"  isNull(Risk) || trim(Risk) == '' || lower(trim(Risk)) == 'all',\r",
				"  'Unknown',\r",
				"  iif(\r",
				"    startsWith(trim(Risk), 'Risk 1'),\r",
				"    'High',\r",
				"    iif(\r",
				"      startsWith(trim(Risk), 'Risk 2'),\r",
				"      'Medium',\r",
				"      iif(\r",
				"        startsWith(trim(Risk), 'Risk 3'),\r",
				"        'Low',\r",
				"        'Unknown'\r",
				"      )\r",
				"    )\r",
				"  )\r",
				"),",
				"          {Facility Type} = iif(isNull({Facility Type}) || trim({Facility Type}) == '', 'Unknown', trim({Facility Type})),",
				"          Address = iif(isNull(Address) || trim(Address) == '', 'Unknown', trim(Address)),",
				"          City = iif(",
				"",
				"     isNull(City) || trim(City) == '', ",
				"",
				"     'OTHER', ",
				"",
				"     iif(",
				"",
				"         regexMatch(upper(trim(City)), '.*CHICAGO.*'), ",
				"",
				"         'CHICAGO', ",
				"",
				"         'OTHER'",
				"",
				"     )",
				"",
				" ),",
				"          State = iif(",
				"",
				"     isNull(State) || trim(State) == '', ",
				"",
				"     'OTH', ",
				"",
				"     iif(",
				"",
				"         upper(trim(State)) == 'IL', ",
				"",
				"         'IL', ",
				"",
				"         'OTH'",
				"",
				"     )",
				"",
				" ),",
				"          Zip = iif(isNull(Zip) || Zip == 0, -1, toInteger(Zip)),",
				"          {Inspection Type} = iif(isNull({Inspection Type}) || trim({Inspection Type}) == '', 'Unknown', trim({Inspection Type})),",
				"          {Inspection Date} = iif(isNull({Inspection Date}) || trim(toString({Inspection Date})) == '', toDate('31-12-9999', 'dd-MM-yyyy'), {Inspection Date}),",
				"          Results = iif(isNull(Results) || trim(Results) == '', 'Unknown', trim(Results)),",
				"          Violations = split(",
				"  trim(",
				"    replace(",
				"      replace(",
				"        replace(",
				"          replace(",
				"            replace(",
				"              replace(",
				"                replace(",
				"                  trim(Violations),",
				"                  '\"\"\"', '\"'),",
				"                '\\t', ''),",
				"              '\\r', ''),",
				"            '\\n', ' '),",
				"          '||', '|'),",
				"        ' |', '|'),",
				"      '| ', '|')",
				"  ),",
				"  '|'",
				"),",
				"          Latitude = iif(\r",
				"  isNull(Latitude) || trim(toString(Latitude)) == '', \r",
				"  toDecimal(0.000000, 9, 6), \r",
				"  toDecimal(Latitude, 9, 6)\r",
				"),",
				"          Longitude = iif(  isNull(Longitude) || trim(toString(Longitude)) == '',   toDecimal(0.000000, 9, 6),   toDecimal(Longitude, 9, 6)),",
				"          Location = iif(isNull(Location) || trim(Location) == '', '(0,0)', trim(Location))) ~> CleanColumns",
				"flattenViolations derive(Violations = regexReplace(\r",
				"    regexReplace(Violations, '^\\\"', ''),\r",
				"    '(?i)(- Comments:.*)',\r",
				"    ''\r",
				"  ),",
				"          Comments = iif(\r",
				"    regexMatch(Violations, 'Comments:'),\r",
				"    regexReplace(regexReplace(Violations, '^.*Comments:', ''), '\\\"$', ''),\r",
				"    'NA'\r",
				")) ~> CleanViolations",
				"CleanColumns foldDown(unroll(Violations),",
				"     mapColumn(",
				"          {Inspection ID},",
				"          {DBA Name},",
				"          {AKA Name},",
				"          {License #},",
				"          {Facility Type},",
				"          Risk,",
				"          Address,",
				"          City,",
				"          State,",
				"          Zip,",
				"          {Inspection Date},",
				"          {Inspection Type},",
				"          Results,",
				"          Violations,",
				"          Latitude,",
				"          Longitude,",
				"          Location",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenViolations",
				"CleanViolations derive(Code = iif(",
				"    equals(trim(Violations), 'NA\"'),",
				"    -1,",
				"    toInteger(regexReplace(Violations, '^([0-9]+)\\\\..*', '$1'))",
				"),",
				"          Violations = iif(",
				"    equals(trim(Violations), 'NA\"'),",
				"    'NA',",
				"    regexReplace(Violations, '^[0-9]+\\\\.', '')",
				")) ~> SplitViolationsCode",
				"SplitViolationsCode derive(Violations = trim(",
				"",
				"   replace(",
				"",
				"     replace(",
				"",
				"       replace(",
				"",
				"         replace(",
				"",
				"           replace(",
				"",
				"             replace(",
				"",
				"               replace(Violations, '\"', ''),",
				"",
				"               '\\t', ' '",
				"",
				"             ),",
				"",
				"             '\\n', ' '",
				"",
				"           ),",
				"",
				"           '\\r', ' '",
				"",
				"         ),",
				"",
				"         '    ', ' '",
				"",
				"       ),",
				"",
				"       '  ', ' '",
				"",
				"     ),",
				"",
				"     '  ', ' '",
				"",
				"   )",
				"",
				" )) ~> CleanViolation",
				"CleanViolation aggregate(groupBy({Inspection ID},",
				"          {DBA Name},",
				"          {AKA Name},",
				"          {License #},",
				"          {Facility Type},",
				"          Risk,",
				"          Address,",
				"          City,",
				"          State,",
				"          Zip,",
				"          {Inspection Date},",
				"          {Inspection Type},",
				"          Results,",
				"          Violations,",
				"          Code,",
				"          Comments,",
				"          Latitude,",
				"          Longitude,",
				"          Location),",
				"     dummy = first({Inspection ID})) ~> aggregate",
				"aggregate derive(FileName = $FName,",
				"          LoadDate = currentUTC()) ~> derivedColumnMeta",
				"derivedColumnMeta sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:[($Silver_FName)],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     mapColumn(",
				"          INSPECTION_ID = {Inspection ID},",
				"          DBA_NAME = {DBA Name},",
				"          AKA_NAME = {AKA Name},",
				"          LICENSE_NO = {License #},",
				"          FACILITY_TYPE = {Facility Type},",
				"          RISK = Risk,",
				"          ADDRESS = Address,",
				"          CITY = City,",
				"          STATE = State,",
				"          ZIP = Zip,",
				"          INSPECTION_DATE = {Inspection Date},",
				"          INSPECTION_TYPE = {Inspection Type},",
				"          RESULTS = Results,",
				"          VIOLATION_CODE = Code,",
				"          VIOLATIONS = Violations,",
				"          COMMENTS = Comments,",
				"          LATITUDE = Latitude,",
				"          LONGITUDE = Longitude,",
				"          LOCATION = Location,",
				"          FILENAME = FileName,",
				"          LOADDATE = LoadDate",
				"     ),",
				"     partitionBy('hash', 1)) ~> sinkSilver"
			]
		}
	}
}